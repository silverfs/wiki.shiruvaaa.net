{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started \u2728","text":"<p>Welcome to my personal wiki, where I store all my findings, manuals and so forth! When I learn something new, I\u2019ll do my best to write it down here.</p> <p>Browse in the nav bar to check up on my projects or use the search bar to find something specific :3</p> <p>Consider visiting my personal website, or my Story hub! \ud83d\ude0a</p> <p></p> <p>Info</p> <p>If you like what you are reading and want something published here (or you want to write it yourself), just let me know on Discord or Github.</p>"},{"location":"cheat-sheets/git%20in%205%20minutes/","title":"Git in 5 Minutes","text":""},{"location":"cheat-sheets/git%20in%205%20minutes/#git-in-5-minutes","title":"Git in 5 Minutes","text":"<p>Many people consider Git to be too confusing or complex to be a choice for version control. Yet Git considers to grow in adoption, and many interesting things have grown up around it. This document is geared for someone wanted to get started with Git, often coming from a Subversion background. For most basic needs this document will cover 70 to 90 percent of your use. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#getting-started","title":"Getting Started","text":"<p>To use Git you will have to setup a repository. You can take an existing directory to make a Git repository, or create an empty directory.</p> <p>To make your current directory a Git repository we simply run init.</p> <p><pre><code>git init\n</code></pre> To make a new directory that is a Git repository we just specify a directory.</p> <p><pre><code>git init newrepo\n</code></pre> From here on out we\u2019ll assume that you are in the root of the Git repository unless otherwise noted. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#adding-new-files","title":"Adding New Files","text":"<p>So we have a repository, but nothing in it. You can add files with the add command.</p> <p><pre><code>git add filename\n</code></pre> To add everything in your directory try git add ..</p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#committing-a-version","title":"Committing a Version","text":"<p>Now that we\u2019ve added these files, we want them to actually be stored in the Git repository. We do this by committing them to the repository.</p> <p><pre><code>git commit -m \"Adding files\"\n</code></pre> If you leave off the -m you will be thrown into an editor to write the message yourself, if supported.  In case you you want to <code>undo</code> the commit and change nothing more, you can use: <pre><code>git reset --mixed HEAD~;\n</code></pre> <code>mixed</code> will <code>reset</code> the <code>index</code> but not the working tree. The changed files are preserved but not marked for commit. It reports back what has not been updated. This is a default action.</p> <p></p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#editing-files","title":"Editing Files","text":"<p>When you\u2019ve made changes to some files, you can run git status to see what will happen on commit. You\u2019ll notice a list of modified files, and a message:</p> <p><pre><code>no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> So running git commit will do nothing unless you explicitly add files to the commit with git add. If you\u2019re looking for the commit command to automatically commit local modifications we use the -a flag.</p> <p><pre><code>git commit -a -m \"Changed some files\"\n</code></pre> Or if you\u2019d like to have only certain files, but still not run git add we pass specific files.</p> <p><pre><code>git commit -m \"change some files\" file1 file2\n</code></pre> Do note that -a will not cause new files to be committed, only modified. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#publishing-your-repository","title":"Publishing Your Repository","text":"<p>To put your repository on a server we\u2019ll start by making a \u201cbare\u201d repository, and upload it to a server.</p> <p><pre><code>cd /tmp\ngit clone --bare ~/your/repo/path project.git\nscp -r project.git ssh://example.com/~/www/\n</code></pre> Now if we have a couple of commits and want to push it up to that location:</p> <p><pre><code>git push ssh://example.com/~/www/project.git\n</code></pre> If you dislike typing the URI each time we can take advantage that a cloned project remembers where it came from.</p> <p><pre><code>cd ..\ngit clone ssh://example.com/~/www/project.git project\n</code></pre> Now git push will push to the URI it was cloned from. You can do this manually by editing .git/config in your repository. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#get-upstream-changes","title":"Get Upstream Changes","text":"<p>If you\u2019re already setup for push as above:</p> <p><pre><code>git pull\n</code></pre> Will bring changes down and merge them in. To pull from a non-default location just specify the URI.</p> <pre><code>git pull http://git.example.com/project.git\n</code></pre> <p>Git remote -v shows what repository you are in to at the moment.</p> <p> </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#more-than-five-minutes","title":"More Than Five Minutes","text":"<p>Everything that didn\u2019t fit in 5 minutes \ud83d\ude05 </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#commits","title":"Commits","text":"<p>You\u2019ll have noticed that Git thinks in \u201ccommits.\u201d These are uniquely identified by a hash. You can see the history and the hashes with git log. Each commit involves modifications, new files, and files being removed. add will put a file in a commit. git reset HEAD will remove everything from the planned commit, but not change files. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#remove","title":"Remove","text":"<p>If you want to remove a file from the repository, removing it from future commits we use rm.</p> <p><pre><code>git rm file\n</code></pre> </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#branching-and-merging","title":"Branching and Merging","text":"<p>Branches are done locally and are fast. To create a new branch we use the branch command.</p> <p><pre><code>git branch test\n</code></pre> the branch command does not move us into the branch, just create one. So we use the checkout command to change branches.</p> <p><pre><code>git checkout test\n</code></pre> The first branch, or main branch, is called \u201cmaster.\u201d</p> <p><pre><code>git checkout master\n</code></pre> While in your branch you can commit changes that will not be reflected in the master branch. When you\u2019re done, or want to push changes to master, switch back to master and use merge.</p> <p><pre><code>git checkout master\ngit merge test\n</code></pre> And if you\u2019re done with the branch you can delete with the branch command and pass the -d flag.</p> <p><pre><code>git branch -d test\n</code></pre> </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#traveling-through-time","title":"Traveling Through Time","text":"<p>You can quickly very previous states of the repository using the checkout command again.</p> <p><pre><code>git checkout HASH\n</code></pre> Uncommited changes will travel with you. Return to the preset with git checkout master as with normal branches. If you commit while in the past a branch is automatically created and your changes will have to be merged forward. </p>"},{"location":"cheat-sheets/git%20in%205%20minutes/#sweeping-changes-under-the-rug-for-later","title":"Sweeping Changes Under the Rug for Later","text":"<p>When moving between branches your local changes move with you. Sometimes you want to switch branches but not commit or take those changes with you. The Git command stash lets you put changes into a safe store.</p> <p><pre><code>git stash\n</code></pre> You can retreive by passing an arguement of apply or pop.</p> <p><pre><code>git stash apply\n</code></pre> The difference between apply and pop is simple. apply will take a stash state and apply it, but preserve that state in the stash. pop will take the stash state, apply it, and remove it from the stash. git stash clear empties the contents of the stash.</p> <p> </p> <p>This document is mostly directly copied from this website. I do not own the original texts, this is simply a good explanation handguide that I use myself and comes in handy at any time.</p>"},{"location":"cheat-sheets/markdown%20template/","title":"Markdown Template","text":"<p>Below the line, you\u2019ll find a template of markdown and its general uses. Under that, you can find how it can be formatted.</p> <p></p>"},{"location":"cheat-sheets/markdown%20template/#foobar","title":"Foobar","text":"<p>Foobar is a Python library for dealing with word pluralization.</p>"},{"location":"cheat-sheets/markdown%20template/#installation","title":"Installation","text":"<p>Use the package manager pip to install foobar.</p> <pre><code>pip install foobar\n</code></pre>"},{"location":"cheat-sheets/markdown%20template/#usage","title":"Usage","text":"<pre><code>import foobar\n\n# returns 'words'\nfoobar.pluralize('word')\n\n# returns 'geese'\nfoobar.pluralize('goose')\n\n# returns 'phenomenon'\nfoobar.singularize('phenomena')\n</code></pre>"},{"location":"cheat-sheets/markdown%20template/#contributing","title":"Contributing","text":"<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p> <p>Please make sure to update tests as appropriate.</p>"},{"location":"cheat-sheets/markdown%20template/#license","title":"License","text":"<p>MIT</p> <p></p> <p></p> <pre><code># Foobar\n\nFoobar is a Python library for dealing with word pluralization.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install foobar.\n\n```bash\npip install foobar\n```\n\n## Usage\n\n```python\nimport foobar\n\n# returns 'words'\nfoobar.pluralize('word')\n\n# returns 'geese'\nfoobar.pluralize('goose')\n\n# returns 'phenomenon'\nfoobar.singularize('phenomena')\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n</code></pre>"},{"location":"docker/","title":"Docker in 2 minutes","text":""},{"location":"docker/#what-is-docker","title":"What is Docker?","text":"<p>Docker is a platform for developing, shipping, and running applications in containers. It uses a virtualization technology that makes it easier to develop and deploy apps inside of neatly packaged virtual containerized environments. Meaning, applications run the same, no matter where they are or what machine they are running on.</p> <p>Docker containers can be deployed to just about any machine without any compatibility issues. your software stays system agnostic, making software simpler to use, less work to develop and easier to maintain and deploy. These containers running on your computer or server act like little micro computers, each with very specific jobs, each with their own OS, their isolated CPU processes, memory and network resources. Because of this, they can be easily added, removed, stopped and started again without affecting each other or the host machine. Containers usually run one specific task, such as a MySQL database or a NodeJS application. They can be networked together and potentially be scaled as well.</p> <p>Docker is a form of virtualization, but, unlike normal virtual machines, the resources are shared directly with the host. Not only that, but Docker uses less disk space as well, as it is able to reuse files efficiently by using a layered file system. </p> <p></p>"},{"location":"docker/cool%20FOSS%20projects/","title":"Cool (FOSS) Projects","text":"<p>Info</p> <p>I\u2019m not affiliated with any of the mentioned projects and services. I have simply taken a liking to them and would like to show others how nice they are to use with your own Docker instance.</p>"},{"location":"docker/cool%20FOSS%20projects/#my-recommendations","title":"My Recommendations","text":""},{"location":"docker/cool%20FOSS%20projects/#portainer","title":"Portainer","text":"<p>Portainer is a lightweight service delivery platform for containerized applications that can be used to manage Docker, Docker Swarm, Kubernetes, and ACI environments. Meaning: a GUI for your containers, Images, Volumes and more (Super cool!). </p> <p> </p> <p>Installation is really easy! Follow these links to the documentation that suits you best: - Portainer-CE - - Portainer-BE</p>"},{"location":"docker/installation%20methods/","title":"Installation","text":"<p>I\u2019m not here to describe you in every single detail how to install Docker on your system. If you want every possible detail there is, I\u2019d advice you to head over to the official documentation. What I want to discuss here are the most common installations, as simple as possible. So without further ado, let\u2019s dive right into it.</p>"},{"location":"docker/installation%20methods/#windows","title":"Windows","text":"<p>I\u2019d advice you to install your Docker instance on a Linux machine or Linux subsystem, but if you have no other choice or just really want to do it on your Windows pc without WSL, it\u2019s possible. In order for you to work with Docker without a WSL2 backend, we need to make use of a Hyper-V backend and Windows containers, but we\u2019ll come back later on that.</p> <p>Warning</p> <p>To run Windows containers, you need Windows 10/11, with either Professional or Enterprise edition. The Windows Home or Education editions will only allow you to run Linux containers.</p> <p> </p> <p>You can download Docker Desktop for Windows directly or, if that doesn\u2019t work, through the website and execute the program.</p> <p>When executing the program, you will be prompted to choose between WSL2 and Hyper-V, You\u2019ll have to choose the Hyper-V option (if you are not able to select an option, that means your system does not support it). If you do support the WSL2 option, you can check that one to continue the installation here</p> <p>Next, follow the instructions the wizard gives you and finalize the installation. When successful, click close to complete the installation process.</p> <p>Great! You have now successfully installed Docker Desktop. You\u2019ll be able to start and view your containers, search in your image-list, and more; all from a neat GUI. </p>"},{"location":"docker/installation%20methods/#wsl2","title":"WSL2","text":"<p>WSL (or Windows Subsystem for Linux) is there for developers to run a GNU/Linux environment, including most command-line tools, utilities and applications directly on Windows. This requires no virtual machine or a dualboot setup and runs with your Windows installation. In order to work with WSL, we\u2019ll have to install it first.</p> <p>Check if you\u2019ve already installed WSL before with this command: <pre><code>wsl\n</code></pre></p> <p>If a bash terminal inside your normal terminal doesn\u2019t appear, it means you don\u2019t have WSL yet. Install WSL with the following command: <pre><code>wsl --install\n</code></pre></p> <p>It should tell you afterwards that the operation was successful. You have installed Ubuntu as your Linux Distribution. You can now continue where you left off in the windows part, by downloading the application and following the magical instructions.</p> <p></p>"},{"location":"docker/installation%20methods/#gnulinux","title":"GNU/Linux","text":"<p>Coming soon \u2122\ufe0f</p>"},{"location":"docker/the%20basics%20of%20docker%20and%20virtualization/","title":"The Basics of Docker and Virtualization","text":""},{"location":"docker/the%20basics%20of%20docker%20and%20virtualization/#pre-virtualization-world","title":"Pre-Virtualization World","text":"<p>In the pre-virtualization days, we used big server racks. Underneath, we had the physical server. we installed the desired Operating System on it and run the application on top of the operating system. Each physical machine would run only one application. You can already guess where I\u2019m going to\u2026</p> <p> </p> <p>There are some problems with this model. First of all, we have to purchase a physical machine. Believe me, those can be very expensive. We might end up only using a fraction of the CPU or a memory of the machine. The rest of the resources would be simply wasted. Secondly, deployment time is often slow. The process of purchasing and configuring your physical server can take ages; especially for big organizations. Thirdly, it would be painful to migrate our applications to servers from different vendors. </p> <p> </p> <p>Underneath we have the physical server. There, we would install the desired Operating System. On top of the OS, a hypervisor layer is introduced which allows us to install multiple virtual machines (VM) on a physical machine. Each VM can have a different Operating system. In this way, we can run multiple Operating Systems, on a single physical machine and each Operating System can run a different application. This is the traditional model of virtualization which is being referenced as the hypervisor-based virtualization. Some of the popular hypervisor providers are VMware and VirtualBox. In the early stage, users would deploy VM\u2019s on their own physical servers, but nowadays, more and more companies have been shifted to deploy VM\u2019s in the cloud with providers such as AWS and Microsoft.</p> <p>There are some huge benefits with this model. First of all, it is more cost efficient. Each physical machine is divided into multiple VM\u2019s and each one only uses it\u2019s own CPU, memory and storage resources. We pay only for the compute power storage and other resources you use with no upfront commitments which is a typical pay-as-you-go model. Secondly, it\u2019s easy to scale with VM\u2019s deployed in the cloud environment. If we wanted more instances of our application, we don\u2019t need to go through the long process of ordering and configuring new physical servers. We can simply deploy a new VM with one click of a mouse. This reduces the time to configure and deploy from weeks to minutes!</p> <p>of-course, it still has limitations:</p> <p>First of all, each VM still needs to have an OS installed. This means that each VM has a full OS with it\u2019s own memory management, device drivers, daemons, etc. We would have to run a whole OS on one server, simply for one application. Secondly, application portability is not guaranteed. Some progress had been achieved in getting virtual machines to run across different types of hypervisors, there is still a lot of work to be done there. VM portability is still at an early stage.</p>"},{"location":"docker/the%20basics%20of%20docker%20and%20virtualization/#container-based-virtualization","title":"Container-based Virtualization","text":"<p>Finally, the Container virtualization technology was dropped. Docker is an implementation of container-based virtualization technologies. Let\u2019s take a look at this diagram here. </p> <p> </p> <p>Underneath, we have our server. This can either be a physical machine, or a virtual machine. Then, we install the operating system on the server. on top of the OS, we install a container engine, which allows us to run multiple guest instances. Each guest instance is called a container. Within each container we install the application and all the libraries that the application depends on.</p> <p>The key to understand the difference between the hypervisor-based virtualization model and the container-based model, is the replication of the models. In the traditional model, each application is running in it\u2019s own copy of the kernel and the virtualization happens at the hardware level. In the new model, we only have one model which has supplied different binaries and runtime to the applications running in isolated containers. So, the container has shared the base runtime kernel, which is the container engine. For the new model, the virtualization happens at the operating system level. Containers shared the host\u2019s OS and is thus much more efficient and light-weighted.</p>"},{"location":"docker/what%20is%20docker%20swarm/","title":"What is Docker Swarm?","text":""},{"location":"docker/what%20is%20docker%20swarm/#clusters","title":"Clusters","text":"<p>Docker Swarm is a tool that \u201cclusters\u201d many Docker Engines and schedules containers. Docker Swarm decides which host to run the container based on your scheduling methods.</p> <p>Let\u2019s say you have a couple of Docker hosts. each host, has their own Docker Deamon. The swarm manager will connect each and every Docker Deamon based on your discovery method. The Swarm manger then knows the status of every host in the cluster. If you decide to run a container, the Swarm manager will decide on which container it runs. The work load will be divided by the \u201cwork nodes\u201d in the swarm and is transparent to the end users.</p> <p>So, basically, Docker Swarm can group multiple hosts into a cluster and distribute docker containers among these hosts.</p> <p> </p>"},{"location":"manuals/android/root/Fajita%20Custom%20Root%20%2B%20Update%20Help/","title":"Fajita Custom Root + Update Help","text":"<p>Warning</p> <p>I don\u2019t know why, but this guide only works with Linux. Windows will not work with this device!</p> <p></p>"},{"location":"manuals/android/root/Fajita%20Custom%20Root%20%2B%20Update%20Help/#how-to-re-root-after-update","title":"How to Re-Root after update","text":""},{"location":"manuals/android/root/Fajita%20Custom%20Root%20%2B%20Update%20Help/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following installed on your computer: - adb - python =&lt; 3</p> <p>Make sure your phone already has the Magisk application. Also, make sure you have installed the update and rebooted the device using the default method before you follow the steps below.</p> <p></p>"},{"location":"manuals/android/root/Fajita%20Custom%20Root%20%2B%20Update%20Help/#steps","title":"Steps","text":"<ol> <li>Download LineageOS/scripts off of Github.</li> <li>Install the latest update of LineageOS.</li> <li>Extract <code>payload.bin</code> from the .zip and move it to the root directory of the downloaded repo (LineageOS/scripts).</li> <li>In that root directory, execute the following command:</li> </ol> <pre><code>python ./update-payload-extractor/extract.py payload.bin --output_dir ./output\n</code></pre> <p>Warning</p> <p>1. If you receive the error which tells you that the module \u2018google\u2019 was not found, simply install it using <code>pip install --upgrade google-api-python-client</code>. 2. If you receive the error \u2018Descriptors cannot not be created directly.\u2019, downgrade protobuf using <code>pip install protobuf==3.20.0</code>.</p> <p></p> <ol> <li> <p>Navigate to the <code>output</code> folder. </p> </li> <li> <p>Push your <code>boot.img</code> to the device:</p> </li> </ol> <pre><code>adb push ./boot.img /sdcard\n</code></pre> <ol> <li> <p>Magisk: patch from file. Select <code>boot.img</code>.</p> </li> <li> <p>After it\u2019s done, pull your patched image and flash the magisk_patched file:</p> </li> </ol> <pre><code>adb pull /sdcard/Download/magisk_patched-25200-&lt;SOME-STRING-HERE&gt;.img\n</code></pre> <pre><code>adb reboot fastboot\n</code></pre> <pre><code>fastboot flash --slot=all boot magisk_patched-&lt;SOME-STRING-HERE&gt;.img\n</code></pre> <ol> <li>Finally, reboot the device through the Device\u2019s screen. </li> </ol> <p> </p>"},{"location":"manuals/android/root/Fajita%20Custom%20Root%20%2B%20Update%20Help/#uncategorized-links","title":"Uncategorized links:","text":"<ul> <li>https://github.com/topjohnwu/Magisk/issues/5299</li> <li>https://wiki.lineageos.org/devices/fajita/install</li> <li>https://download.lineageos.org/fajita</li> <li>https://topjohnwu.github.io/Magisk/install.html#patching-images</li> </ul>"},{"location":"manuals/windows/tips-and-tricks/","title":"Windows: Tips &amp; Tricks","text":"<p>Welcome to your favourite info-centre! This documentation corner contains Tips and Tricks for Windows related situations, used for better overview, functionality, privacy, and useful tools to help you on your way!</p> <p>Select a topic in the sidebar to get started.</p>"},{"location":"manuals/windows/tips-and-tricks/privacy%20first/simple%20search/","title":"Simple Search","text":"<p>Not many people use the Windows search function and can say with confidence that they can find the things they want. I can\u2019t fix that in this document, but no matter on what platform or service you use, be it a search engine or an operating system, your results are best unfiltered, uncensored and untracked. Unfortunately, we can\u2019t be 100% free of those shackles using Windows. Unless\u2026 Simple Search may be your first step to a better Windows experience\u2026 </p>"},{"location":"manuals/windows/tips-and-tricks/privacy%20first/simple%20search/#simplified-searching-on-windows-10","title":"Simplified searching on Windows 10","text":"<p>The search bar in Windows 10 can be either nice to use or incredibly irritating. Let me give you an example.</p> <p>In most many default environments, your Windows search bar could look like this:</p> <p></p> <p></p> <p>Of course we want to get rid of this. We don\u2019t want to see best matches and accidentally click on a webpage again.  To do this, execute these following three commands in a command prompt:</p> <pre><code>reg add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search /f /v BingSearchEnabled /t REG_DWORD /d 0\nreg add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search /f /v AllowSearchToUseLocation /t REG_DWORD /d 0\nreg add HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search /f /v CortanaConsent /t REG_DWORD /d 0\n</code></pre> <p>These commands add 3 keys in your Windows Registry. One Disables Bingsearch in the searchbar. The second one disables the use of your location when using the searchbar to search for stuff. The last one retracts the use of Cortana in the search function.</p>"},{"location":"manuals/windows/tips-and-tricks/system%20and%20administration/reset%20windows%20passwords%20with%20an%20install%20disk/","title":"Reset Windows Passwords with an Install Disk","text":"<p>There are numerous ways to reset a password. Whatever your reason, you do you. This guide will explain in steps how to get a working command prompt at the login screen to change settings (user management, as an example). Following this guide requires an install disk of Windows (I will use Windows 10 in this guide) so if you don\u2019t have one, just go to Microsoft\u2019s website and download the official Windows 10 ISO file (No product key required for download). The Media Creation tool allows you to download &amp; make a Windows 10 install CD/USB derived from your Windows PC.</p> <p></p>"},{"location":"manuals/windows/tips-and-tricks/system%20and%20administration/reset%20windows%20passwords%20with%20an%20install%20disk/#step-1-boot-from-windows-10-install-disk","title":"Step 1: Boot from Windows 10 Install Disk","text":"<p>First, insert the Windows 10 installation disk into your PC and reboot from it. Remember to change the boot order and disable UEFI secure boot temporarily in BIOS/UEFI firmware so you can boot from CD or USB.</p> <p></p> <p>When the screen displays \u201cPress any key to boot from CD or DVD\u201d, you guessed it: we need to press a key ;). If you don\u2019t, the PC will automatically boot from your Windows Hard Disk.</p>"},{"location":"manuals/windows/tips-and-tricks/system%20and%20administration/reset%20windows%20passwords%20with%20an%20install%20disk/#step-2-replace-sethcexe-with-cmdexe","title":"Step 2: Replace Sethc.exe with Cmd.exe","text":"<p>When you come to the Windows Setup screen, just press Shift+F10 key combinations to launch Command Prompt.</p> <p></p> <p>Type following commands in Command Prompt window and press Enter key each time you enter a command. Replace d: with the drive letter of your Windows installation.</p> <pre><code>copy C:\\windows\\system32\\sethc.exe C:\\\ncopy /y C:\\windows\\system32\\cmd.exe d:\\windows\\system32\\sethc.exe\n</code></pre> <p>(This will essentially replace the sticky keys with the command prompt).</p> <p></p> <p>Now you can close the Command Prompt, cancel Windows Setup, restart your PC and remove Windows install disk.</p> <p></p>"},{"location":"manuals/windows/tips-and-tricks/system%20and%20administration/reset%20windows%20passwords%20with%20an%20install%20disk/#step-3-reset-forgotten-windows-10-password","title":"Step 3: Reset Forgotten Windows 10 Password","text":"<p>After your PC restarts. At Windows 10 logon screen, press Shift Key 5 times consecutively and it will launch Command Prompt with administrator privileges.</p> <p>Now, to change the password use the following command. Do not forget to replace \u2018username\u2019 with actual local account\u2019s username and \u2018newpassword\u2019 with the password that you want to set.</p> <pre><code>net user username newpassword\n</code></pre> <p></p> <p>Close the Command Prompt. You can now log into Windows 10 with the new password.</p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/powertoys/","title":"Powertoys","text":"<p>There are numerous ways to reset a password. Whatever your reason, you do you. This guide will explain in steps how to get a working command prompt at the login screen to change settings (user management, as an example). Following this guide requires an install disk of Windows (I will use Windows 10 in this guide) so if you don\u2019t have one, just go to Microsoft\u2019s website and download the official Windows 10 ISO file (No product key required for download). The Media Creation tool allows you to download &amp; make a Windows 10 install CD/USB derived from your Windows PC.</p> <p></p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/powertoys/#step-1-boot-from-windows-10-install-disk","title":"Step 1: Boot from Windows 10 Install Disk","text":"<p>First, insert the Windows 10 installation disk into your PC and reboot from it. Remember to change the boot order and disable UEFI secure boot temporarily in BIOS/UEFI firmware so you can boot from CD or USB.</p> <p></p> <p>When the screen displays \u201cPress any key to boot from CD or DVD\u201d, you guessed it: we need to press a key ;). If you don\u2019t, the PC will automatically boot from your Windows Hard Disk.</p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/powertoys/#step-2-replace-sethcexe-with-cmdexe","title":"Step 2: Replace Sethc.exe with Cmd.exe","text":"<p>When you come to the Windows Setup screen, just press SHIFT + F10 key combinations to launch Command Prompt.</p> <p></p> <p>Type following commands in Command Prompt window and press Enter key each time you enter a command. Replace d: with the drive letter of your Windows installation.</p> <pre><code>copy C:\\windows\\system32\\sethc.exe C:\\\ncopy /y C:\\windows\\system32\\cmd.exe d:\\windows\\system32\\sethc.exe\n</code></pre> <p>(This will essentially replace the sticky keys with the command prompt).</p> <p></p> <p>Now you can close the Command Prompt, cancel Windows Setup, restart your PC and remove Windows install disk.</p> <p></p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/powertoys/#step-3-reset-forgotten-windows-10-password","title":"Step 3: Reset Forgotten Windows 10 Password","text":"<p>After your PC restarts. At Windows 10 logon screen, press Shift Key 5 times consecutively and it will launch Command Prompt with administrator privileges.</p> <p>Now, to change the password use the following command. Do not forget to replace \u2018username\u2019 with actual local account\u2019s username and \u2018newpassword\u2019 with the password that you want to set.</p> <pre><code>net user username newpassword\n</code></pre> <p></p> <p>Close the Command Prompt. You can now log into Windows 10 with the new password.</p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/winaero%20tweaker/","title":"Winaero Tweaker","text":"<p>have you ever thought about how your Windows experience is missing a few things? Like it isn\u2019t quite finished? If so, then you\u2019re feelings are probably right. Windows sucks. Luckily, we can slightly improve our experience with this awesome tool \ud83d\ude04.</p>"},{"location":"manuals/windows/tips-and-tricks/tools%20and%20tweaks/winaero%20tweaker/#features","title":"Features","text":"<p>Microsoft has been really quiet since Sergey Tkachenko (the creator of Winaero Tweaker) added tweaks for Windows 11. With it he brought some must-have features that everyone missed in Windows 11, like the classic context menus, the ribbon in the File Explorer and taskbar tweaks.</p> <p>In addition to that, Winaero Tweaker provides tweaks that\u2019ll work from Windows 7 to 11. These tweaks range from context menu options, appearance and behavior settings, to extra tools, privacy tweaks and classic apps!  </p> <p>You can check out all features and give it a try at: https://winaerotweaker.com/</p>"},{"location":"manuals/windows/tips-and-tricks/win11/install%20without%20bloatware/","title":"Windows 11 Installation Without Bloatware","text":"<p>This page does not need to be long, so let\u2019s dive right into it.</p> <ol> <li>When choosing a language in the installation process, begin by selecting \u201cEnglish (World)\u201d as your region during the setup process. </li> <li>In the \u2018Time and Currency Format\u2019 dropdown, choose \u201d European English\u201d or \u201cEnglish (World)\u201d\u201c. This choice might trigger an error message labeled \u201cOOBEREGION\u201d due to language codes. (which is good!)</li> <li>Don\u2019t worry if you see the red error message. Just click \u2018Skip\u2019 to continue the installation.  </li> </ol> <p>The benefit? A clean Windows 11 installation without unnecessary apps \u2013 only the essential ones remain.</p>"},{"location":"manuals/windows/tips-and-tricks/win11/install%20without%20internet/","title":"Installation Without Needing An Internet Connection","text":""},{"location":"manuals/windows/tips-and-tricks/win11/install%20without%20internet/#introduction","title":"Introduction","text":"<p>I have you wondering, why do we even need to have a hack for this\u2026 That\u2019s just how Microsoft is these days.</p> <p>Anyway, I\u2019ll show you how to evade some stupid implementations using a little trickery!</p> <p>Note</p> <p>Before enthusiastically following this guide, you might want to combine this one with this guide for an installation of Windows 11 without bloatware.</p> <p></p>"},{"location":"manuals/windows/tips-and-tricks/win11/install%20without%20internet/#steps","title":"Steps","text":"<ol> <li>Boot a Windows 11 ISO like normal (but without an internet connection of course).</li> <li>Once you\u2019re on the \u201cOops, you\u2019ve lost internet connection\u201d or \u201cLet\u2019s connect you to a network\u201d page, use the Shift+F10 keyboard shortcut to open the command prompt.   Once you\u2019re in the command prompt, type the following down below and press enter:</li> </ol> <pre><code>OOBE\\BYPASSNRO\n</code></pre> <p>If everything went well, your computer should restart automatically. </p> <ol> <li>Once it boots up again, follow the process like normal, and when you\u2019re on the \u201cOops, you\u2019ve lost internet connection\u201d or \u201cLet\u2019s connect you to a network\u201d page again, click the \u201cI don\u2019t have internet\u201d and the Accept button (if applicable).</li> </ol> <p>That\u2019s it. byebye (\u25cf\u2019\u25e1\u2019\u25cf).</p>"}]}